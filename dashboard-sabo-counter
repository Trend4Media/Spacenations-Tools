<!DOCTYPE html>
<html lang="de">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Sabo-Counter (Dashboard) - Spacenations Tools</title>
    <link rel="stylesheet" href="css/global-footer.css">
    
    <style>
        /* CSS Variablen f√ºr Light/Dark Mode */
        :root {
            /* Dark Mode (Standard) */
            --bg-gradient: linear-gradient(135deg, #0c0c0c 0%, #1a1a2e 50%, #16213e 100%);
            --text-primary: #e0e0e0;
            --text-secondary: #b0b0b0;
            --bg-panel: rgba(0, 0, 0, 0.7);
            --border-primary: #3a5998;
            --border-shadow: rgba(58, 89, 152, 0.3);
            --input-bg: rgba(0, 0, 0, 0.8);
            --input-border: rgba(58, 89, 152, 0.5);
            --sabo-color: #e74c3c;
            --save-color: #27ae60;
            --card-bg: rgba(16, 16, 16, 0.9);
            --card-border: rgba(58, 89, 152, 0.5);
            --accent-primary: #ff8c42;
            --accent-secondary: #4a90e2;
            --success-color: #22c55e;
            --warning-color: #f59e0b;
            --error-color: #ef4444;
        }
        
        /* Light Mode */
        :root.light-mode {
            --bg-gradient: linear-gradient(135deg, #f8fafc 0%, #e2e8f0 50%, #cbd5e1 100%);
            --text-primary: #1e293b;
            --text-secondary: #64748b;
            --bg-panel: rgba(255, 255, 255, 0.95);
            --border-primary: #e2e8f0;
            --border-shadow: rgba(0, 0, 0, 0.1);
            --input-bg: #f8fafc;
            --input-border: #e2e8f0;
            --sabo-color: #dc2626;
            --save-color: #059669;
            --card-bg: linear-gradient(135deg, #ffffff, #f8fafc);
            --card-border: #e2e8f0;
        }
        
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        body {
            font-family: Arial, sans-serif;
            background: var(--bg-gradient);
            color: var(--text-primary);
            min-height: 100vh;
            padding: 20px;
            transition: all 0.3s ease;
        }
        
        .container {
            max-width: 1400px;
            margin: 0 auto;
            background: var(--bg-panel);
            border: 2px solid var(--border-primary);
            border-radius: 10px;
            padding: 20px;
            box-shadow: 0 0 20px var(--border-shadow);
            backdrop-filter: blur(10px);
            transition: all 0.3s ease;
        }
        
        .header {
            text-align: center;
            margin-bottom: 30px;
            position: relative;
        }
        
        .back-button {
            position: absolute;
            left: 0;
            top: 50%;
            transform: translateY(-50%);
            background: linear-gradient(45deg, #3a5998, #4a90e2);
            color: white;
            border: none;
            padding: 10px 20px;
            border-radius: 8px;
            font-weight: bold;
            cursor: pointer;
            transition: all 0.3s ease;
            text-decoration: none;
            display: flex;
            align-items: center;
            gap: 8px;
        }
        
        .back-button:hover {
            transform: translateY(-50%) translateY(-2px);
            box-shadow: 0 5px 15px rgba(74, 144, 226, 0.4);
        }
        
        .theme-toggle {
            position: absolute;
            right: 0;
            top: 50%;
            transform: translateY(-50%);
            background: linear-gradient(45deg, #3a5998, #4a90e2);
            color: white;
            border: none;
            padding: 10px 15px;
            border-radius: 8px;
            font-weight: bold;
            cursor: pointer;
            transition: all 0.3s ease;
            display: flex;
            align-items: center;
            gap: 8px;
            font-size: 14px;
        }
        
        .theme-toggle:hover {
            transform: translateY(-50%) translateY(-2px);
            box-shadow: 0 5px 15px rgba(74, 144, 226, 0.4);
        }
        
        .spacenations {
            font-size: 2.5rem;
            font-weight: bold;
            color: #ff8c42;
            text-shadow: 0 0 10px rgba(255, 140, 66, 0.5);
            letter-spacing: 2px;
            margin: 0;
            line-height: 1;
        }
        
        .subtitle {
            font-size: 1.2rem;
            color: var(--text-secondary);
            margin: 5px 0 0 0;
            font-weight: normal;
        }
        
        /* Dashboard Enhancement: Status Bar */
        .dashboard-status {
            background: linear-gradient(135deg, var(--sabo-color), #c0392b);
            color: white;
            padding: 10px 20px;
            border-radius: 8px;
            margin-bottom: 20px;
            text-align: center;
            font-weight: 600;
            box-shadow: 0 4px 15px rgba(231, 76, 60, 0.3);
        }
        
        /* Input und Summary Sections */
        .input-summary-section {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 30px;
            margin-bottom: 30px;
        }
        
        .input-section {
            background: var(--bg-panel);
            border: 2px solid var(--sabo-color);
            border-radius: 10px;
            padding: 20px;
            transition: all 0.3s ease;
        }
        
        .input-section h2 {
            color: var(--sabo-color);
            margin-bottom: 15px;
            text-align: center;
            text-shadow: 0 0 5px rgba(231, 76, 60, 0.5);
        }
        
        .summary-section {
            background: var(--bg-panel);
            border: 2px solid var(--border-primary);
            border-radius: 10px;
            padding: 20px;
            transition: all 0.3s ease;
        }
        
        .summary-section h2 {
            color: var(--accent-secondary);
            margin-bottom: 15px;
            text-align: center;
            text-shadow: 0 0 5px rgba(74, 144, 226, 0.5);
        }
        
        .summary-content {
            color: var(--text-secondary);
            line-height: 1.6;
        }
        
        .reports-count {
            background: var(--card-bg);
            border: 1px solid var(--card-border);
            border-radius: 8px;
            padding: 10px;
            margin-bottom: 15px;
            text-align: center;
        }
        
        .reports-count .count-number {
            font-size: 1.5rem;
            font-weight: bold;
            color: var(--sabo-color);
            display: block;
        }
        
        .reports-count .count-label {
            color: var(--text-secondary);
            font-size: 0.9rem;
            margin-top: 3px;
        }
        
        .building-list {
            border: 1px solid var(--card-border);
            border-radius: 6px;
            background: var(--card-bg);
            height: auto;
        }
        
        .building-list-header {
            background: var(--border-primary);
            color: var(--text-primary);
            padding: 8px 12px;
            font-weight: 600;
            border-bottom: 2px solid var(--card-border);
        }
        
        .building-item {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 4px 12px;
            border-bottom: 1px solid var(--card-border);
            font-size: 0.85rem;
        }
        
        .building-item:last-child {
            border-bottom: none;
        }
        
        .building-item .name {
            color: var(--text-primary);
            font-weight: 500;
            flex: 1;
            font-size: 0.8rem;
        }
        
        .building-item .levels {
            color: var(--sabo-color);
            font-weight: bold;
            min-width: 40px;
            text-align: right;
            font-size: 0.85rem;
        }
        
        label {
            display: block;
            margin-bottom: 10px;
            color: var(--text-secondary);
            font-weight: bold;
        }
        
        textarea {
            width: 100%;
            height: 300px;
            background: var(--input-bg);
            border: 2px solid var(--input-border);
            border-radius: 5px;
            color: var(--text-primary);
            padding: 15px;
            font-family: monospace;
            font-size: 12px;
            resize: vertical;
            transition: all 0.3s ease;
        }
        
        textarea:focus {
            outline: none;
            border-color: var(--sabo-color);
            box-shadow: 0 0 10px rgba(231, 76, 60, 0.3);
        }
        
        /* Enhanced button section */
        .button-section {
            display: flex;
            justify-content: center;
            gap: 20px;
            margin-bottom: 30px;
            flex-wrap: wrap;
        }
        
        button {
            background: linear-gradient(45deg, #3a5998, #4a90e2);
            border: none;
            color: white;
            padding: 12px 30px;
            border-radius: 5px;
            cursor: pointer;
            font-size: 16px;
            font-weight: bold;
            transition: all 0.3s ease;
        }
        
        button:hover {
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(74, 144, 226, 0.4);
        }
        
        .calculate-btn {
            background: linear-gradient(45deg, #e74c3c, #c0392b);
        }
        
        .clear-btn {
            background: linear-gradient(45deg, #95a5a6, #7f8c8d);
        }
        
        /* NEW: Save Button */
        .save-btn {
            background: linear-gradient(45deg, var(--save-color), #2ecc71);
        }
        
        .results {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 30px;
            margin-bottom: 30px;
        }
        
        .result-box {
            background: var(--bg-panel);
            border: 2px solid var(--sabo-color);
            border-radius: 10px;
            padding: 20px;
            transition: all 0.3s ease;
        }
        
        .result-box h2 {
            color: var(--sabo-color);
            margin-bottom: 15px;
            text-align: center;
            text-shadow: 0 0 5px rgba(231, 76, 60, 0.5);
        }
        
        .stat-line {
            display: flex;
            justify-content: space-between;
            padding: 8px 0;
            border-bottom: 1px solid rgba(255, 255, 255, 0.1);
            align-items: center;
        }
        
        .stat-line:last-child {
            border-bottom: none;
        }
        
        .stat-name {
            color: var(--text-secondary);
            flex: 1;
        }
        
        .stat-value {
            color: var(--sabo-color);
            font-weight: bold;
            min-width: 60px;
            text-align: right;
        }
        
        .points-value {
            color: var(--warning-color);
            font-weight: bold;
            min-width: 50px;
            text-align: right;
            font-size: 0.9rem;
        }
        
        .total-line {
            border-top: 2px solid var(--sabo-color);
            margin-top: 10px;
            padding-top: 10px;
            font-weight: bold;
            font-size: 18px;
        }
        
        .total-line .stat-value {
            color: var(--sabo-color);
            text-shadow: 0 0 5px rgba(231, 76, 60, 0.5);
        }
        
        /* Building Details Table */
        .building-details {
            background: var(--bg-panel);
            border: 2px solid var(--border-primary);
            border-radius: 10px;
            padding: 20px;
            margin-bottom: 30px;
        }
        
        .building-details h3 {
            color: var(--accent-secondary);
            margin-bottom: 15px;
            text-align: center;
        }
        
        .details-table {
            width: 100%;
            border-collapse: collapse;
            margin-top: 10px;
        }
        
        .details-table th,
        .details-table td {
            padding: 8px 12px;
            text-align: left;
            border-bottom: 1px solid var(--card-border);
        }
        
        .details-table th {
            background: var(--card-bg);
            color: var(--text-primary);
            font-weight: 600;
            text-align: center;
        }
        
        .details-table td {
            color: var(--text-secondary);
        }
        
        .details-table .building-name {
            color: var(--text-primary);
            font-weight: 500;
        }
        
        .details-table .levels-destroyed {
            color: var(--sabo-color);
            font-weight: bold;
            text-align: center;
        }
        
        .details-table .points-earned {
            color: var(--warning-color);
            font-weight: bold;
            text-align: center;
        }
        
        /* Save Status Indicator */
        .save-status {
            position: fixed;
            bottom: 20px;
            right: 20px;
            background: var(--save-color);
            color: white;
            padding: 10px 15px;
            border-radius: 8px;
            font-weight: 600;
            opacity: 0;
            transform: translateY(100%);
            transition: all 0.3s ease;
            z-index: 1000;
        }
        
        .save-status.show {
            opacity: 1;
            transform: translateY(0);
        }
        
        .save-status.error {
            background: var(--error-color);
        }
        
        /* Recent Sabotages History */
        .recent-sabotages {
            margin-top: 30px;
            background: var(--bg-panel);
            border: 2px solid var(--border-primary);
            border-radius: 10px;
            padding: 20px;
        }
        
        .recent-sabotages h3 {
            color: var(--accent-secondary);
            margin-bottom: 15px;
            text-align: center;
        }
        
        .sabotage-history-item {
            background: var(--card-bg);
            border: 1px solid var(--card-border);
            border-radius: 8px;
            padding: 15px;
            margin-bottom: 10px;
            border-left: 4px solid var(--sabo-color);
        }
        
        .sabotage-meta {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 10px;
            font-size: 0.9rem;
            color: var(--text-secondary);
        }
        
        .sabotage-stats {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(120px, 1fr));
            gap: 10px;
            font-size: 0.85rem;
        }
        
        .sabotage-stat {
            display: flex;
            justify-content: space-between;
        }
        
        /* Responsive */
        @media (max-width: 768px) {
            .input-summary-section {
                grid-template-columns: 1fr;
                gap: 20px;
            }
            
            .results {
                grid-template-columns: 1fr;
            }
            
            .container {
                padding: 10px;
            }
            
            .button-section {
                flex-direction: column;
                align-items: center;
            }
            
            .spacenations {
                font-size: 2rem;
            }
            
            .back-button,
            .theme-toggle {
                position: static;
                transform: none;
                margin-bottom: 15px;
            }
            
            .back-button:hover,
            .theme-toggle:hover {
                transform: translateY(-2px);
            }
            
            .header {
                display: flex;
                flex-direction: column;
                align-items: center;
                gap: 10px;
            }
            
            .details-table {
                font-size: 0.85rem;
            }
            
            .details-table th,
            .details-table td {
                padding: 6px 8px;
            }
            
            .sabotage-stats {
                grid-template-columns: 1fr 1fr;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <a href="dashboard.html" class="back-button">
                <span>‚Üê</span>
                <span>Zur√ºck zum Dashboard</span>
            </a>
            <button class="theme-toggle" onclick="toggleTheme()">
                <span id="theme-icon">üåô</span>
                <span id="theme-text">Light Mode</span>
            </button>
            <h1 class="spacenations">SPACENATIONS</h1>
            <div class="subtitle">Sabo-Counter (Dashboard-Version)</div>
        </div>
        
        <!-- Dashboard Status -->
        <div class="dashboard-status" id="dashboard-status">
            üíæ Sabo-Counter (Dashboard): Alle Sabotagen werden automatisch in Ihrem Profil gespeichert
        </div>
        
        <div class="input-summary-section">
            <div class="input-section">
                <h2>üí• Sabotage-Berichte</h2>
                <label for="sabo-reports">F√ºgen Sie hier Ihre Sabotage-Berichte ein:</label>
                <textarea id="sabo-reports" placeholder="Sabotage-Berichte hier einf√ºgen..."></textarea>
            </div>
            
            <div class="summary-section">
                <h2>üìä Auswertung der Berichte</h2>
                <div class="summary-content">
                    <div class="reports-count">
                        <span class="count-number" id="reports-evaluated">0</span>
                        <div class="count-label">Berichte ausgewertet</div>
                    </div>
                    
                    <div class="building-list" id="summary-building-list">
                        <div class="building-list-header">Geb√§ude</div>
                        <div class="building-item">
                            <span class="name">Planetenzentrale</span>
                            <span class="levels" id="levels-planetenzentrale">0</span>
                        </div>
                        <div class="building-item">
                            <span class="name">Raumhafen</span>
                            <span class="levels" id="levels-raumhafen">0</span>
                        </div>
                        <div class="building-item">
                            <span class="name">Wohngeb√§ude</span>
                            <span class="levels" id="levels-wohngeb√§ude">0</span>
                        </div>
                        <div class="building-item">
                            <span class="name">Solarpark</span>
                            <span class="levels" id="levels-solarpark">0</span>
                        </div>
                        <div class="building-item">
                            <span class="name">Eisenmine</span>
                            <span class="levels" id="levels-eisenmine">0</span>
                        </div>
                        <div class="building-item">
                            <span class="name">Siliziumraffinerie</span>
                            <span class="levels" id="levels-siliziumraffinerie">0</span>
                        </div>
                        <div class="building-item">
                            <span class="name">Kohlenstoffgewinnungsanlage</span>
                            <span class="levels" id="levels-kohlenstoffgewinnungsanlage">0</span>
                        </div>
                        <div class="building-item">
                            <span class="name">Bohrturm</span>
                            <span class="levels" id="levels-bohrturm">0</span>
                        </div>
                        <div class="building-item">
                            <span class="name">Chemiefabrik</span>
                            <span class="levels" id="levels-chemiefabrik">0</span>
                        </div>
                        <div class="building-item">
                            <span class="name">Recyclinganlage</span>
                            <span class="levels" id="levels-recyclinganlage">0</span>
                        </div>
                        <div class="building-item">
                            <span class="name">Rohstofflager</span>
                            <span class="levels" id="levels-rohstofflager">0</span>
                        </div>
                        <div class="building-item">
                            <span class="name">Schiffsfabrik</span>
                            <span class="levels" id="levels-schiffsfabrik">0</span>
                        </div>
                        <div class="building-item">
                            <span class="name">Waffenfabrik</span>
                            <span class="levels" id="levels-waffenfabrik">0</span>
                        </div>
                        <div class="building-item">
                            <span class="name">Forschungszentrum</span>
                            <span class="levels" id="levels-forschungszentrum">0</span>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        
        <div class="button-section">
            <button class="calculate-btn" onclick="calculateSabotage()">üí• Sabotagen Auswerten</button>
            <button class="save-btn" onclick="saveSabotageData()" id="save-btn" disabled>üíæ Sabotage Speichern</button>
            <button class="clear-btn" onclick="clearAll()">üóëÔ∏è Alles L√∂schen</button>
        </div>
        
        <div class="results">
            <div class="result-box">
                <h2>üí• Sabotage-Statistiken</h2>
                <div id="sabo-stats">
                    <div class="stat-line">
                        <span class="stat-name">Anzahl Sabotagen:</span>
                        <span class="stat-value" id="sabo-count">0</span>
                    </div>
                    <div class="stat-line">
                        <span class="stat-name">Geb√§udestufen zerst√∂rt:</span>
                        <span class="stat-value" id="total-levels">0</span>
                    </div>
                    <div class="stat-line total-line">
                        <span class="stat-name">Gesamtpunkte:</span>
                        <span class="stat-value" id="total-points">0</span>
                    </div>
                    <div class="stat-line">
                        <span class="stat-name">√ò Punkte pro Sabo:</span>
                        <span class="stat-value" id="average-points">0</span>
                    </div>
                </div>
            </div>
            
            <div class="result-box">
                <h2>üè¢ Geb√§ude-√úbersicht</h2>
                <div id="building-summary">
                    <div class="stat-line">
                        <span class="stat-name">Verschiedene Geb√§udetypen:</span>
                        <span class="stat-value" id="building-types">0</span>
                    </div>
                    <div class="stat-line">
                        <span class="stat-name">Meistgetroffen:</span>
                        <span class="stat-value" id="most-hit-building">-</span>
                    </div>
                    <div class="stat-line">
                        <span class="stat-name">Wertvollstes Ziel:</span>
                        <span class="stat-value" id="most-valuable-building">-</span>
                    </div>
                </div>
            </div>
        </div>
        
        <!-- Detailed Building Results -->
        <div class="building-details" id="building-details" style="display: none;">
            <h3>üìã Detaillierte Geb√§ude-Aufschl√ºsselung</h3>
            <table class="details-table">
                <thead>
                    <tr>
                        <th>Geb√§ude</th>
                        <th>Stufen zerst√∂rt</th>
                        <th>Punkte pro Stufe</th>
                        <th>Gesamtpunkte</th>
                    </tr>
                </thead>
                <tbody id="building-details-body">
                    <!-- Wird dynamisch gef√ºllt -->
                </tbody>
            </table>
        </div>
        
        <!-- Recent Sabotages History -->
        <div class="recent-sabotages" id="recent-sabotages-section" style="display: none;">
            <h3>üìù Letzte Sabotagen</h3>
            <div id="recent-sabotages-list">
                <!-- Wird dynamisch gef√ºllt -->
            </div>
        </div>
    </div>

    <!-- Save Status Notification -->
    <div class="save-status" id="save-status"></div>

    <!-- Global Footer -->
    <footer class="global-footer">
        <div class="footer-content">
            <!-- Rechtliche Links -->
            <div class="footer-section">
                <h4>üìã Rechtliches</h4>
                <ul class="footer-links legal-links">
                    <li><a href="impressum.html">üìÑ Impressum</a></li>
                    <li><a href="datenschutz.html">üîí Datenschutzerkl√§rung</a></li>
                    <li><a href="agb.html">üìú AGB & Nutzungsbedingungen</a></li>
                    <li><a href="kontakt.html">‚úâÔ∏è Kontakt</a></li>
                </ul>
            </div>
            
            <!-- Tools & Navigation -->
            <div class="footer-section">
                <h4>üõ†Ô∏è Tools & Navigation</h4>
                <ul class="footer-links">
                    <li><a href="index.html">üè† Startseite</a></li>
                    <li><a href="dashboard-calculator.html">‚öîÔ∏èüíæ AS-Counter (Dashboard)</a></li>
                    <li><a href="dashboard-raid-counter.html">üè¥‚Äç‚ò†Ô∏èüíæ Raid-Counter (Dashboard)</a></li>
                    <li><a href="dashboard-sabo-counter.html">üí•üíæ Sabo-Counter (Dashboard)</a></li>
                </ul>
            </div>
            
            <!-- Admin & Support -->
            <div class="footer-section">
                <h4>‚öôÔ∏è Administration</h4>
                <ul class="footer-links admin-links">
                    <li><a href="admin-login.html" id="admin-login-link">üîê Admin-Login</a></li>
                    <li><a href="admin-dashboard.html" id="admin-dashboard-link" style="display: none;">üõ°Ô∏è Admin-Dashboard</a></li>
                </ul>
                <ul class="footer-links" style="margin-top: 15px;">
                    <li><a href="hilfe.html">‚ùì Hilfe & FAQ</a></li>
                    <li><a href="changelog.html">üìù Changelog</a></li>
                    <li><a href="roadmap.html">üó∫Ô∏è Roadmap</a></li>
                </ul>
            </div>
        </div>
        
        <div class="footer-bottom">
            <div class="footer-bottom-left">
                <p>¬© 2025 Spacenations Tools | Inoffizielle Tools f√ºr die Spacenations Community</p>
                <p style="font-size: 0.8rem; margin-top: 5px; opacity: 0.8;">
                    Made with ‚ù§Ô∏è for Spacenations Players | Version 2.1.0
                </p>
            </div>
            
            <div class="footer-bottom-right">
                <!-- Status Indicator -->
                <div class="status-indicator" id="system-status">
                    <span class="status-dot"></span>
                    <span>Online</span>
                </div>
                
                <!-- Quick Tools -->
                <div class="quick-tools">
                    <a href="#" class="quick-tool" onclick="window.ThemeAPI?.toggle()">üåô Theme</a>
                    <a href="dashboard.html" class="quick-tool" id="quick-dashboard">üè† Dashboard</a>
                </div>
                
                <!-- Social Links -->
                <div class="social-links">
                    <a href="#" class="social-link" title="Discord Server">üéÆ</a>
                    <a href="#" class="social-link" title="GitHub Repository">‚ö°</a>
                    <a href="mailto:admin@spacenations-tools.de" class="social-link" title="E-Mail">‚úâÔ∏è</a>
                </div>
            </div>
        </div>
    </footer>

    <!-- JavaScript -->
    <script src="js/firebase-config.js"></script>
    <script src="js/theme-manager.js"></script>
    <script src="js/auth-manager.js"></script>
    <script src="js/firebase-sync.js"></script>

    <script>
        // Geb√§ude-Punkte-System
        const BUILDING_POINTS = {
            'Planetenzentrale': 3,
            'Raumhafen': 1,
            'Wohngeb√§ude': 1,
            'Solarpark': 1,
            'Eisenmine': 2,
            'Siliziumraffinerie': 2,
            'Kohlenstoffgewinnungsanlage': 2,
            'Bohrturm': 2,
            'Chemiefabrik': 2,
            'Recyclinganlage': 1,
            'Rohstofflager': 1,
            'Schiffsfabrik': 3,
            'Waffenfabrik': 3,
            'Forschungszentrum': 3
        };

        // Globale Variablen f√ºr aktuellen Sabotage-Bericht
        let currentSabotageData = null;
        let currentUser = null;
        let userData = null;

        // Initialisierung
        document.addEventListener('DOMContentLoaded', async function() {
            try {
                // Warten bis AuthManager bereit ist
                await window.AuthAPI.waitForInit();
                
                console.log('üí• Dashboard Sabo-Counter initialisiert');
                
                // Auth State √ºberwachen
                window.AuthAPI.onAuthStateChange(async (user, userDataFromAuth) => {
                    if (user && userDataFromAuth) {
                        currentUser = user;
                        userData = userDataFromAuth;
                        
                        console.log('‚úÖ Sabo-Counter f√ºr User geladen:', userData.username);
                        
                        // Letzte Sabotagen laden
                        await loadRecentSabotages();
                        
                        // Sabo-Counter Aktivit√§t hinzuf√ºgen
                        setTimeout(() => {
                            if (window.AuthAPI.addActivity) {
                                window.AuthAPI.addActivity('üí•', 'Sabo-Counter (Dashboard) besucht');
                            }
                        }, 2000);
                        
                    } else {
                        console.log('‚ùå Kein User - Dashboard Sabo-Counter nicht verf√ºgbar');
                        // Weiterleitung wird automatisch durch firebase-sync.js gehandelt
                    }
                });
                
            } catch (error) {
                console.error('‚ùå Sabo-Counter Initialisierung fehlgeschlagen:', error);
            }
        });

        // Zahlen-Hilfsfunktionen
        function parseNumber(str) {
            return parseInt(str.replace(/\./g, '')) || 0;
        }

        function formatNumber(num) {
            return num.toLocaleString('de-DE');
        }

        // Sabotage-Berechnung (erweitert f√ºr Dashboard)
        function calculateSabotage() {
            const saboText = document.getElementById('sabo-reports').value;
            
            // Initialisiere Geb√§ude-Z√§hler
            const buildings = {};
            let saboCount = 0;
            let totalLevels = 0;
            let totalPoints = 0;
            
            const lines = saboText.split('\n');
            let inBuildingList = false;
            
            for (let line of lines) {
                line = line.trim();
                
                // Erkenne Sabo-Start
                if (line.includes('sabotierte erfolgreich')) {
                    saboCount++;
                    inBuildingList = true;
                    continue;
                }
                
                // √úberspringe Header-Zeile
                if (line.includes('Geb√§ude') && line.includes('Stufen')) {
                    continue;
                }
                
                // Parse Geb√§ude-Zeilen
                if (inBuildingList && line.length > 0) {
                    // Versuche verschiedene Formate zu parsen
                    let buildingName = '';
                    let levels = 0;
                    
                    // Format: "Geb√§udename Zahl"
                    const match = line.match(/^(.+?)\s+(\d+)$/);
                    if (match) {
                        buildingName = match[1].trim();
                        levels = parseNumber(match[2]);
                    } else {
                        // Format: "Geb√§udename" (ohne Zahl = 0 Stufen)
                        const buildingMatch = line.match(/^([A-Za-z√§√∂√º√Ñ√ñ√ú√ü\s]+)$/);
                        if (buildingMatch) {
                            buildingName = buildingMatch[1].trim();
                            levels = 0;
                        }
                    }
                    
                    // Pr√ºfe ob es ein bekanntes Geb√§ude ist
                    if (buildingName && BUILDING_POINTS.hasOwnProperty(buildingName)) {
                        if (!buildings[buildingName]) {
                            buildings[buildingName] = 0;
                        }
                        buildings[buildingName] += levels;
                        totalLevels += levels;
                        totalPoints += levels * BUILDING_POINTS[buildingName];
                    } else if (buildingName && levels > 0) {
                        // Unbekanntes Geb√§ude, gib Warnung aus
                        console.warn('Unbekanntes Geb√§ude gefunden:', buildingName);
                    }
                    
                    // Beende Geb√§ude-Liste bei leerer Zeile oder neuem Sabo-Bericht
                    if (line.length === 0 || line.includes('sabotierte erfolgreich')) {
                        inBuildingList = false;
                    }
                }
            }
            
            // Berechne Durchschnitt
            const averagePoints = saboCount > 0 ? Math.round(totalPoints / saboCount) : 0;
            
            // Update Statistiken
            document.getElementById('sabo-count').textContent = saboCount;
            document.getElementById('total-levels').textContent = formatNumber(totalLevels);
            document.getElementById('total-points').textContent = formatNumber(totalPoints);
            document.getElementById('average-points').textContent = formatNumber(averagePoints);
            
            // Update Geb√§ude-√úbersicht
            const buildingTypes = Object.keys(buildings).length;
            document.getElementById('building-types').textContent = buildingTypes;
            
            // Meistgetroffenes Geb√§ude
            let mostHitBuilding = '-';
            let mostHitCount = 0;
            for (const [building, count] of Object.entries(buildings)) {
                if (count > mostHitCount) {
                    mostHitCount = count;
                    mostHitBuilding = `${building} (${count})`;
                }
            }
            document.getElementById('most-hit-building').textContent = mostHitBuilding;
            
            // Wertvollstes Ziel (nach Gesamtpunkten)
            let mostValuableBuilding = '-';
            let mostValuablePoints = 0;
            for (const [building, count] of Object.entries(buildings)) {
                const points = count * BUILDING_POINTS[building];
                if (points > mostValuablePoints) {
                    mostValuablePoints = points;
                    mostValuableBuilding = `${building} (${points} Pkt.)`;
                }
            }
            document.getElementById('most-valuable-building').textContent = mostValuableBuilding;
            
            // Update detaillierte Tabelle
            updateBuildingDetailsTable(buildings);
            
            // Update Auswertung der Berichte
            document.getElementById('reports-evaluated').textContent = saboCount;
            updateSummaryBuildingList(buildings);
            
            // Sabotage-Daten f√ºr Speichern vorbereiten
            currentSabotageData = {
                saboText: saboText,
                buildings: buildings,
                saboCount: saboCount,
                totalLevels: totalLevels,
                totalPoints: totalPoints,
                averagePoints: averagePoints,
                timestamp: new Date()
            };
            
            // Save-Button aktivieren falls User eingeloggt
            const saveBtn = document.getElementById('save-btn');
            if (currentUser && totalPoints > 0) {
                saveBtn.disabled = false;
            }
            
            console.log('üí• Sabotage berechnet:', currentSabotageData);
        }

        // Sabotage-Daten speichern
        async function saveSabotageData() {
            if (!currentUser || !currentSabotageData) {
                showSaveStatus('Keine Daten zum Speichern vorhanden', 'error');
                return;
            }
            
            const saveBtn = document.getElementById('save-btn');
            saveBtn.disabled = true;
            saveBtn.textContent = 'üíæ Speichert...';
            
            try {
                // Sabotage-Daten in Firestore speichern
                const db = window.FirebaseConfig.getDB();
                const sabotageDoc = {
                    userId: currentUser.uid,
                    timestamp: window.FirebaseConfig.getServerTimestamp(),
                    saboText: currentSabotageData.saboText,
                    buildings: currentSabotageData.buildings,
                    saboCount: currentSabotageData.saboCount,
                    totalLevels: currentSabotageData.totalLevels,
                    totalPoints: currentSabotageData.totalPoints,
                    averagePoints: currentSabotageData.averagePoints,
                    sabotageType: 'building_sabotage'
                };
                
                const docRef = await db.collection('userSabotages').add(sabotageDoc);
                
                // Dashboard-Statistiken aktualisieren
                await updateDashboardSabotageStats();
                
                // Aktivit√§t hinzuf√ºgen
                await window.AuthAPI.addActivity('üí•', `Sabotage gespeichert (${currentSabotageData.saboCount} Sabotagen, ${formatNumber(currentSabotageData.totalPoints)} Punkte)`);
                
                showSaveStatus(`Sabotage erfolgreich gespeichert! (${currentSabotageData.saboCount} Sabotagen)`, 'success');
                console.log('‚úÖ Sabotage gespeichert:', docRef.id);
                
                // Letzte Sabotagen neu laden
                await loadRecentSabotages();
                
                // Event f√ºr Dashboard-Updates
                document.dispatchEvent(new CustomEvent('sabotageDataUpdated', { 
                    detail: currentSabotageData 
                }));
                
            } catch (error) {
                console.error('‚ùå Fehler beim Speichern der Sabotage:', error);
                showSaveStatus('Fehler beim Speichern der Sabotage', 'error');
            } finally {
                saveBtn.disabled = false;
                saveBtn.textContent = 'üíæ Sabotage Speichern';
            }
        }

        // Dashboard-Sabotage-Statistiken aktualisieren
        async function updateDashboardSabotageStats() {
            try {
                if (!currentUser) return;
                
                const db = window.FirebaseConfig.getDB();
                const statsRef = db.collection('userStats').doc(currentUser.uid);
                const statsDoc = await statsRef.get();
                
                let currentStats = { sabotages: 0, totalSabotagePoints: 0, totalLevelsDestroyed: 0 };
                if (statsDoc.exists) {
                    currentStats = { ...currentStats, ...statsDoc.data() };
                }
                
                // Neue Sabotage-Stats hinzuf√ºgen
                const updatedStats = {
                    sabotages: (currentStats.sabotages || 0) + currentSabotageData.saboCount,
                    totalSabotagePoints: (currentStats.totalSabotagePoints || 0) + currentSabotageData.totalPoints,
                    totalLevelsDestroyed: (currentStats.totalLevelsDestroyed || 0) + currentSabotageData.totalLevels,
                    lastSabotageUpdate: window.FirebaseConfig.getServerTimestamp()
                };
                
                await statsRef.set(updatedStats, { merge: true });
                
                console.log('üìä Dashboard-Sabotage-Statistiken aktualisiert');
                
            } catch (error) {
                console.error('‚ùå Fehler beim Aktualisieren der Sabotage-Statistiken:', error);
            }
        }

        // Letzte Sabotagen laden
        async function loadRecentSabotages() {
            try {
                if (!currentUser) return;
                
                const db = window.FirebaseConfig.getDB();
                const sabotagesQuery = await db.collection('userSabotages')
                    .where('userId', '==', currentUser.uid)
                    .orderBy('timestamp', 'desc')
                    .limit(5)
                    .get();
                
                const recentSabotagesList = document.getElementById('recent-sabotages-list');
                const recentSabotagesSection = document.getElementById('recent-sabotages-section');
                
                if (sabotagesQuery.empty) {
                    recentSabotagesSection.style.display = 'none';
                    return;
                }
                
                let sabotagesHTML = '';
                sabotagesQuery.forEach(doc => {
                    const sabotage = doc.data();
                    const sabotageDate = sabotage.timestamp.toDate();
                    const timeAgo = getTimeAgo(sabotageDate);
                    
                    sabotagesHTML += `
                        <div class="sabotage-history-item">
                            <div class="sabotage-meta">
                                <span><strong>${sabotage.saboCount || 0} Sabotagen</strong> - ${formatNumber(sabotage.totalPoints || 0)} Punkte</span>
                                <span>${timeAgo}</span>
                            </div>
                            <div class="sabotage-stats">
                                <div class="sabotage-stat">
                                    <span>Stufen zerst√∂rt:</span>
                                    <span>${formatNumber(sabotage.totalLevels || 0)}</span>
                                </div>
                                <div class="sabotage-stat">
                                    <span>√ò Punkte/Sabo:</span>
                                    <span>${formatNumber(sabotage.averagePoints || 0)}</span>
                                </div>
                                <div class="sabotage-stat">
                                    <span>Geb√§udetypen:</span>
                                    <span>${Object.keys(sabotage.buildings || {}).length}</span>
                                </div>
                            </div>
                        </div>
                    `;
                });
                
                recentSabotagesList.innerHTML = sabotagesHTML;
                recentSabotagesSection.style.display = 'block';
                
                console.log('üìù Letzte Sabotagen geladen:', sabotagesQuery.size);
                
            } catch (error) {
                console.error('‚ùå Fehler beim Laden der letzten Sabotagen:', error);
            }
        }

        function updateSummaryBuildingList(buildings) {
            // Update Anzahl der Berichte
            document.getElementById('reports-evaluated').textContent = document.getElementById('sabo-count').textContent;
            
            // Alle Geb√§ude-IDs definieren
            const buildingIds = {
                'Planetenzentrale': 'levels-planetenzentrale',
                'Raumhafen': 'levels-raumhafen',
                'Wohngeb√§ude': 'levels-wohngeb√§ude',
                'Solarpark': 'levels-solarpark',
                'Eisenmine': 'levels-eisenmine',
                'Siliziumraffinerie': 'levels-siliziumraffinerie',
                'Kohlenstoffgewinnungsanlage': 'levels-kohlenstoffgewinnungsanlage',
                'Bohrturm': 'levels-bohrturm',
                'Chemiefabrik': 'levels-chemiefabrik',
                'Recyclinganlage': 'levels-recyclinganlage',
                'Rohstofflager': 'levels-rohstofflager',
                'Schiffsfabrik': 'levels-schiffsfabrik',
                'Waffenfabrik': 'levels-waffenfabrik',
                'Forschungszentrum': 'levels-forschungszentrum'
            };
            
            // Alle Geb√§ude auf 0 setzen
            Object.values(buildingIds).forEach(id => {
                const element = document.getElementById(id);
                if (element) {
                    element.textContent = '0';
                }
            });
            
            // Aktualisiere mit den tats√§chlichen Werten
            for (const [building, levels] of Object.entries(buildings)) {
                const id = buildingIds[building];
                if (id) {
                    const element = document.getElementById(id);
                    if (element) {
                        element.textContent = formatNumber(levels);
                    }
                }
            }
        }

        function updateBuildingDetailsTable(buildings) {
            const tableBody = document.getElementById('building-details-body');
            const detailsSection = document.getElementById('building-details');
            
            if (Object.keys(buildings).length === 0) {
                detailsSection.style.display = 'none';
                return;
            }
            
            let tableHTML = '';
            
            // Sortiere Geb√§ude nach Gesamtpunkten (absteigend)
            const sortedBuildings = Object.entries(buildings).sort((a, b) => {
                const pointsA = a[1] * BUILDING_POINTS[a[0]];
                const pointsB = b[1] * BUILDING_POINTS[b[0]];
                return pointsB - pointsA;
            });
            
            for (const [building, levels] of sortedBuildings) {
                const pointsPerLevel = BUILDING_POINTS[building];
                const totalPoints = levels * pointsPerLevel;
                
                tableHTML += `
                    <tr>
                        <td class="building-name">${building}</td>
                        <td class="levels-destroyed">${formatNumber(levels)}</td>
                        <td class="points-earned">${pointsPerLevel}</td>
                        <td class="points-earned">${formatNumber(totalPoints)}</td>
                    </tr>
                `;
            }
            
            tableBody.innerHTML = tableHTML;
            detailsSection.style.display = 'block';
        }

        // Save-Status anzeigen
        function showSaveStatus(message, type = 'success') {
            const saveStatus = document.getElementById('save-status');
            saveStatus.textContent = message;
            saveStatus.className = `save-status ${type} show`;
            
            setTimeout(() => {
                saveStatus.classList.remove('show');
            }, 3000);
        }

        // Zeit-Hilfsfunktion
        function getTimeAgo(date) {
            const now = new Date();
            const diffMs = now - date;
            const diffMins = Math.floor(diffMs / 60000);
            const diffHours = Math.floor(diffMs / 3600000);
            const diffDays = Math.floor(diffMs / 86400000);
            
            if (diffMins < 1) return 'Gerade eben';
            if (diffMins < 60) return `vor ${diffMins} Min`;
            if (diffHours < 24) return `vor ${diffHours} Std`;
            if (diffDays < 7) return `vor ${diffDays} Tag${diffDays === 1 ? '' : 'en'}`;
            
            return date.toLocaleDateString('de-DE', { 
                day: '2-digit', 
                month: '2-digit',
                year: '2-digit'
            });
        }

        // Alles l√∂schen
        function clearAll() {
            document.getElementById('sabo-reports').value = '';
            
            // Reset alle Statistik-Werte auf 0
            document.getElementById('sabo-count').textContent = '0';
            document.getElementById('total-levels').textContent = '0';
            document.getElementById('total-points').textContent = '0';
            document.getElementById('average-points').textContent = '0';
            
            // Reset Geb√§ude-√úbersicht
            document.getElementById('building-types').textContent = '0';
            document.getElementById('most-hit-building').textContent = '-';
            document.getElementById('most-valuable-building').textContent = '-';
            
            // Reset Auswertung der Berichte
            document.getElementById('reports-evaluated').textContent = '0';
            
            // Alle Geb√§ude-Level auf 0 setzen
            const buildingIds = [
                'levels-planetenzentrale', 'levels-raumhafen', 'levels-wohngeb√§ude', 'levels-solarpark',
                'levels-eisenmine', 'levels-siliziumraffinerie', 'levels-kohlenstoffgewinnungsanlage',
                'levels-bohrturm', 'levels-chemiefabrik', 'levels-recyclinganlage', 'levels-rohstofflager',
                'levels-schiffsfabrik', 'levels-waffenfabrik', 'levels-forschungszentrum'
            ];
            
            buildingIds.forEach(id => {
                const element = document.getElementById(id);
                if (element) {
                    element.textContent = '0';
                }
            });
            
            // Hide building details table
            document.getElementById('building-details').style.display = 'none';
            
            // Save-Button deaktivieren
            const saveBtn = document.getElementById('save-btn');
            saveBtn.disabled = true;
            
            // Aktuelle Sabotage-Daten zur√ºcksetzen
            currentSabotageData = null;
            
            console.log('üóëÔ∏è Sabo-Counter zur√ºckgesetzt');
        }

        // Export-API f√ºr Dashboard-Integration
        window.SabotageCounterAPI = {
            // Sabotage-Statistiken abrufen
            getStats: async () => {
                if (!currentUser) return null;
                
                try {
                    const db = window.FirebaseConfig.getDB();
                    const statsDoc = await db.collection('userStats').doc(currentUser.uid).get();
                    
                    if (statsDoc.exists) {
                        const data = statsDoc.data();
                        return {
                            totalSabotages: data.sabotages || 0,
                            totalPoints: data.totalSabotagePoints || 0,
                            totalLevelsDestroyed: data.totalLevelsDestroyed || 0,
                            averagePoints: data.sabotages > 0 ? Math.round((data.totalSabotagePoints || 0) / data.sabotages) : 0
                        };
                    }
                    return { totalSabotages: 0, totalPoints: 0, totalLevelsDestroyed: 0, averagePoints: 0 };
                } catch (error) {
                    console.error('‚ùå Fehler beim Abrufen der Sabotage-Stats:', error);
                    return null;
                }
            },
            
            // Sabotage-Historie abrufen
            getSabotageHistory: async (limit = 10) => {
                if (!currentUser) return [];
                
                try {
                    const db = window.FirebaseConfig.getDB();
                    const sabotagesQuery = await db.collection('userSabotages')
                        .where('userId', '==', currentUser.uid)
                        .orderBy('timestamp', 'desc')
                        .limit(limit)
                        .get();
                    
                    const sabotages = [];
                    sabotagesQuery.forEach(doc => {
                        sabotages.push({
                            id: doc.id,
                            ...doc.data()
                        });
                    });
                    
                    return sabotages;
                } catch (error) {
                    console.error('‚ùå Fehler beim Abrufen der Sabotage-Historie:', error);
                    return [];
                }
            },
            
            // Pr√ºfen ob User eingeloggt ist
            isLoggedIn: () => !!currentUser,
            
            // Daten neu laden
            reloadData: () => loadRecentSabotages()
        };

        // Theme Toggle (falls theme-manager.js nicht verf√ºgbar)
        function toggleTheme() {
            if (window.ThemeAPI) {
                window.ThemeAPI.toggle();
            } else {
                console.warn('‚ö†Ô∏è ThemeAPI nicht verf√ºgbar');
            }
        }

        // Keyboard-Shortcuts
        document.addEventListener('keydown', function(e) {
            // Strg+S = Speichern
            if (e.ctrlKey && e.key === 's') {
                e.preventDefault();
                if (!document.getElementById('save-btn').disabled) {
                    saveSabotageData();
                }
            }
            
            // Strg+Enter = Berechnen
            if (e.ctrlKey && e.key === 'Enter') {
                e.preventDefault();
                calculateSabotage();
            }
            
            // Strg+D = Dashboard
            if (e.ctrlKey && e.key === 'd') {
                e.preventDefault();
                window.location.href = 'dashboard.html';
            }
        });

        // Auto-Save beim Verlassen der Seite (falls Daten vorhanden)
        window.addEventListener('beforeunload', function(e) {
            if (currentSabotageData && currentUser && !document.getElementById('save-btn').disabled) {
                e.preventDefault();
                e.returnValue = 'Sie haben ungespeicherte Sabotage-Daten. M√∂chten Sie die Seite wirklich verlassen?';
                return e.returnValue;
            }
        });

        // Dashboard-Integration: Sabo-Counter als genutzt markieren
        function onSabotageCounterUsed() {
            if (window.dashboardAPI && window.dashboardAPI.onSabotageCounterUsed) {
                window.dashboardAPI.onSabotageCounterUsed();
            }
        }

        // Sabo-Counter-Nutzung tracken
        document.getElementById('sabo-reports').addEventListener('input', function() {
            if (this.value.length > 100) { // Erst nach sinnvoller Eingabe
                onSabotageCounterUsed();
            }
        });

        console.log('üí• Dashboard Sabo-Counter vollst√§ndig geladen');
        console.log('üí° Keyboard-Shortcuts: Strg+S (Speichern), Strg+Enter (Berechnen), Strg+D (Dashboard)');
        console.log('üîß API verf√ºgbar: window.SabotageCounterAPI');
    </script>
</body>
</html>
